#!/usr/bin/env python
"""
start a localq server
"""

import logging
import Pyro4
import argparse
import sys
import os
from signal import SIGTERM

__author__ = 'dankle'

def main():
    opts = parse_cli()
    setup_logging(opts.loglevel)
    urifile = os.path.expanduser(opts.u)

    if os.path.exists(urifile):
        pf = file(urifile, 'r')
        uri = str(pf.read().strip())
        pf.close()
    else:
        print "Could not find file " + str(urifile) + ". Is the localq server running?"
        sys.exit(1)

    logging.debug("Gettign server")
    lqserver = Pyro4.Proxy(uri)
    logging.debug("waiting for jobs to finish...")
    lqserver.wait()
    uf = os.path.expanduser(opts.u)
    if os.path.exists(uf):
        logging.debug("Deleting urifile {}".format(uf))
        os.remove(uf)

    os.kill(lqserver.get_pid(), SIGTERM)


def parse_cli():
    """
    Parse command line argument
    :return: a Namespace object from argparse.parse_args()
    """
    ap = argparse.ArgumentParser()
    ap.add_argument('-u', help="URI file path", action="store", required=False, default="~/tmp/localqd", type=str)
    ap.add_argument("--loglevel", help="level of logging", default='INFO', type=str,
                    choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'])

    return ap.parse_args()

def setup_logging(loglevel="INFO"):
    """
    Set up logging
    :return:
    """
    numeric_level = getattr(logging, loglevel.upper(), None)
    if not isinstance(numeric_level, int):
        raise ValueError('Invalid log level: %s' % loglevel)
    logging.basicConfig(level=numeric_level,
                        format='%(levelname)s %(asctime)s %(funcName)s - %(message)s')
    logging.info("Started log with loglevel %(loglevel)s" % {"loglevel":loglevel})


if __name__ == "__main__":
    sys.exit(main())
